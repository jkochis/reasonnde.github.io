"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function e(t,n,o){function i(s,a){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);throw new Error("Cannot find module '"+s+"'")}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n?n:e)},c,c.exports,e,t,n,o)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,n){e("../node_modules/waypoints/lib/noframework.waypoints");var o=document.body.style,i=document.location+"images/bg/",r=".png",s=["Feather_WHITE_Updated","DuckPrints_Orange"],a=!1,l=["sm-new-employees-container","sm-current-employees-container","sm-exiting-employees-container","sm-cadillac-tax-container","sm-penalties-container","sm-benefits-requirements-container","sm-voluntary-insurance-container","sm-exchanges-container","sm-whats-next-container","new-employees-container","current-employees-container","exiting-employees-container","cadillac-tax-container","penalties-container","benefits-requirements-container","voluntary-insurance-container","exchanges-container","whats-next-container"],c=function(){new Waypoint({element:document.getElementById("sm-benefits-requirements"),handler:function(e){console.log(this.element.clientHeight),jQuery("#sm-benefits-requirements:not(.shown)").addClass("animated bounceInDown shown"),jQuery("#sm-benefits-requirements").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){jQuery("#sm-benefits-requirements").removeClass("animated bounceInDown")})},offset:function(){return window.innerHeight-2*this.element.clientHeight}}),new Waypoint({element:document.getElementById("sm-penalties"),handler:function(e){console.log(this.element.clientHeight),jQuery("#sm-penalties:not(.shown)").addClass("animated zoomInUp shown"),jQuery("#sm-penalties").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){jQuery("#sm-penalties").removeClass("animated zoomInUp  ")})},offset:function(){return window.innerHeight-2*this.element.clientHeight}}),new Waypoint({element:document.getElementById("sm-cadillac-tax"),handler:function(e){console.log(this.element.clientHeight),jQuery("#sm-cadillac-tax:not(.shown)").addClass("animated zoomIn shown"),jQuery("#sm-cadillac-tax").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){jQuery("#sm-cadillac-tax").removeClass("animated zoomIn  ")})},offset:function(){return window.innerHeight-2*this.element.clientHeight}}),new Waypoint({element:document.getElementById("sm-exchanges"),handler:function(e){console.log("here"),jQuery("#sm-exchanges:not(.shown)").addClass("animated rotateIn shown"),jQuery("#sm-exchanges").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){jQuery("#sm-exchanges").removeClass("animated rotateIn")})},offset:function(){return window.innerHeight-2*this.element.clientHeight}}),new Waypoint({element:document.getElementById("sm-voluntary-insurance"),handler:function(e){console.log("here"),jQuery("#sm-voluntary-insurance:not(.shown)").addClass("animated slideInUp shown"),jQuery("#sm-voluntary-insurance").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){jQuery("#sm-voluntary-insurance").removeClass("animated slideInUp")})},offset:function(){return window.innerHeight-2*this.element.clientHeight}}),new Waypoint({element:document.getElementById("sm-whats-next"),handler:function(e){console.log("here"),jQuery("#sm-whats-next:not(.shown)").addClass("animated bounceInUp shown"),jQuery("#sm-whats-next").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){jQuery("#sm-whats-next").removeClass("animated bounceInUp")})},offset:function(){return window.innerHeight-2*this.element.clientHeight}})};window.waypoints=[],l.forEach(function(e,t){console.log("."+e),window.waypoints[t]=new Waypoint({element:document.querySelector("."+e),handler:function(e){console.log("loading..."),u(Math.floor(2*Math.random()))}})}),a!==!0&&(s.forEach(function(e){(new Image).src=i+e+r}),a=!0);var u=function(e){setTimeout(function(){o.backgroundImage="url("+i+s[e]+r+")",console.log("loading "+i+s[e]+r)},100)},h=jQuery(".business-type-select");h.each(function(e,t){console.log(t),jQuery(t).on("click",function(){console.log(t),jQuery(".hcr-menu-item").hide(),"business-50"===t.dataset.business?jQuery("a.sm").parent().show():jQuery("a.lg").parent().show(),document.body.classList="",document.body.classList.add(t.dataset.business+"-active");var e=document.querySelector(".business-type-select.active");e&&e.classList.remove("active"),t.classList.add("active");for(var n=document.querySelectorAll(".hcr-menu"),o=0;o<n.length;o++)n[o].style.visibility="visible";d.accordion(0,"top",function(e,t){t.el.classList.add("open"),console.log(e,t)});var i=document.querySelector(".business-container.visible");i&&(i.style.display="none",i.classList.remove("visible"));var r=document.querySelector("."+t.dataset.business+"-container");console.log(r),jQuery(r).fadeIn(),r.classList.add("visible"),jQuery("html, body").animate({scrollTop:jQuery(r).offset().top},1e3,function(){jQuery(r).find("h3").addClass("animated").addClass("pulse")}),u(Math.floor(2*Math.random())+0),c(),window.waypoints=[],l.forEach(function(e,t){console.log("."+e),window.waypoints[t]=new Waypoint({element:document.querySelector("."+e),handler:function(e){console.log("loading..."),u(Math.floor(2*Math.random()))}})})})});var d=new OriDomi(document.querySelector(".hcr-menu"),{hPanels:3,ripple:2,shading:"hard",touchEnabled:!1});d.foldUp("top");var f=jQuery(".hcr-menu-item a");f.on("click",function(e,t){e.preventDefault(),console.log("."+e.target.href.split("#")[1]),jQuery("html, body").animate({scrollTop:jQuery("."+e.target.href.split("#")[1]+"-container").offset().top-100},1e3,function(){})});for(var p=[],m=0;m<f.length;m++){var y=f[m],w=jQuery(y).attr("href");p.push(w)}jQuery(window).scroll(function(){for(var e=jQuery(window).scrollTop(),t=jQuery(window).height(),n=jQuery(document).height(),o=0;o<p.length;o++){var i=p[o].replace("#",""),r=jQuery("."+i+"-container").offset().top-200,s=jQuery("."+i+"-container").height();e>=r&&r+s>e?jQuery("a[href='#"+i+"']").addClass("active"):jQuery("a[href='#"+i+"']").removeClass("active")}if(e+t==n&&!jQuery("nav li:last-child a").hasClass("active")){var a=jQuery(".nav-active").attr("href");jQuery("a[href='"+a+"']").removeClass("active"),jQuery("nav li:last-child a").addClass("active")}})},{"../node_modules/waypoints/lib/noframework.waypoints":2}],2:[function(e,t,n){!function(){function e(o){if(!o)throw new Error("No options passed to Waypoint constructor");if(!o.element)throw new Error("No element option passed to Waypoint constructor");if(!o.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,o),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=o.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,t+=1}var t=0,n={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var o in n)t.push(n[o]);for(var i=0,r=t.length;r>i;i++)t[i][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.invokeAll("enable")},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=i.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,o[e.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,o={},i=window.Waypoint,r=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical);e&&t&&(this.adapter.off(".waypoints"),delete o[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,i.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){t.didScroll&&!i.isTouch||(t.didScroll=!0,i.requestAnimationFrame(e))})},t.prototype.handleResize=function(){i.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in t){var o=t[n],i=o.newScroll>o.oldScroll,r=i?o.forward:o.backward;for(var s in this.waypoints[n]){var a=this.waypoints[n][s],l=o.oldScroll<a.triggerPoint,c=o.newScroll>=a.triggerPoint,u=l&&c,h=!l&&!c;(u||h)&&(a.queueTrigger(r),e[a.group.id]=a.group)}}for(var d in e)e[d].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?i.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?i.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var n in this.waypoints[t])e.push(this.waypoints[t][n]);for(var o=0,i=e.length;i>o;o++)e[o].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,n=t?void 0:this.adapter.offset(),o={};this.handleScroll(),e={horizontal:{contextOffset:t?0:n.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:n.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var r in e){var s=e[r];for(var a in this.waypoints[r]){var l,c,u,h,d,f=this.waypoints[r][a],p=f.options.offset,m=f.triggerPoint,y=0,w=null==m;f.element!==f.element.window&&(y=f.adapter.offset()[s.offsetProp]),"function"==typeof p?p=p.apply(f):"string"==typeof p&&(p=parseFloat(p),f.options.offset.indexOf("%")>-1&&(p=Math.ceil(s.contextDimension*p/100))),l=s.contextScroll-s.contextOffset,f.triggerPoint=y+l-p,c=m<s.oldScroll,u=f.triggerPoint>=s.oldScroll,h=c&&u,d=!c&&!u,!w&&h?(f.queueTrigger(s.backward),o[f.group.id]=f.group):!w&&d?(f.queueTrigger(s.forward),o[f.group.id]=f.group):w&&s.oldScroll>=f.triggerPoint&&(f.queueTrigger(s.forward),o[f.group.id]=f.group)}}return i.requestAnimationFrame(function(){for(var e in o)o[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in o)o[e].refresh()},t.findByElement=function(e){return o[e.waypointContextKey]},window.onload=function(){r&&r(),t.refreshAll()},i.requestAnimationFrame=function(t){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e;n.call(window,t)},i.Context=t}(),function(){function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function n(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),o[this.axis][this.name]=this}var o={vertical:{},horizontal:{}},i=window.Waypoint;n.prototype.add=function(e){this.waypoints.push(e)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var o=this.triggerQueues[n],i="up"===n||"left"===n;o.sort(i?t:e);for(var r=0,s=o.length;s>r;r+=1){var a=o[r];(a.options.continuous||r===o.length-1)&&a.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(t){this.waypoints.sort(e);var n=i.Adapter.inArray(t,this.waypoints),o=n===this.waypoints.length-1;return o?null:this.waypoints[n+1]},n.prototype.previous=function(t){this.waypoints.sort(e);var n=i.Adapter.inArray(t,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},n.prototype.remove=function(e){var t=i.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(e){return o[e.axis][e.name]||new n(e)},i.Group=n}(),function(){function e(e){return e===e.window}function t(t){return e(t)?t:t.defaultView}function n(e){this.element=e,this.handlers={}}var o=window.Waypoint;n.prototype.innerHeight=function(){var t=e(this.element);return t?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var t=e(this.element);return t?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(e,t){function n(e,t,n){for(var o=0,i=t.length-1;i>o;o++){var r=t[o];n&&n!==r||e.removeEventListener(r)}}var o=e.split("."),i=o[0],r=o[1],s=this.element;if(r&&this.handlers[r]&&i)n(s,this.handlers[r][i],t),this.handlers[r][i]=[];else if(i)for(var a in this.handlers)n(s,this.handlers[a][i]||[],t),this.handlers[a][i]=[];else if(r&&this.handlers[r]){for(var l in this.handlers[r])n(s,this.handlers[r][l],t);this.handlers[r]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var e=this.element.ownerDocument.documentElement,n=t(this.element.ownerDocument),o={top:0,left:0};return this.element.getBoundingClientRect&&(o=this.element.getBoundingClientRect()),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}},n.prototype.on=function(e,t){var n=e.split("."),o=n[0],i=n[1]||"__default",r=this.handlers[i]=this.handlers[i]||{},s=r[o]=r[o]||[];s.push(t),this.element.addEventListener(o,t)},n.prototype.outerHeight=function(t){var n,o=this.innerHeight();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),o+=parseInt(n.marginTop,10),o+=parseInt(n.marginBottom,10)),o},n.prototype.outerWidth=function(t){var n,o=this.innerWidth();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),o+=parseInt(n.marginLeft,10),o+=parseInt(n.marginRight,10)),o},n.prototype.scrollLeft=function(){var e=t(this.element);return e?e.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var e=t(this.element);return e?e.pageYOffset:this.element.scrollTop},n.extend=function(){function e(e,t){if("object"===("undefined"==typeof e?"undefined":_typeof(e))&&"object"===("undefined"==typeof t?"undefined":_typeof(t)))for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}for(var t=Array.prototype.slice.call(arguments),n=1,o=t.length;o>n;n++)e(t[0],t[n]);return t[0]},n.inArray=function(e,t,n){return null==t?-1:t.indexOf(e,n)},n.isEmptyObject=function(e){for(var t in e)return!1;return!0},o.adapters.push({name:"noframework",Adapter:n}),o.Adapter=n}()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
