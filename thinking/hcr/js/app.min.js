"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function t(e,n,o){function i(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);throw new Error("Cannot find module '"+s+"'")}var c=n[s]={exports:{}};e[s][0].call(c.exports,function(t){var n=e[s][1][t];return i(n?n:t)},c,c.exports,t,e,n,o)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(t,e,n){t("../node_modules/waypoints/lib/noframework.waypoints");var o=document.body.style,i=document.location+"images/bg/",r=".png",s=["WallPaper2","WallPaper2_tone","WallPaper2.5","WallPaper3","WallPaper3.5","WallPaper4","WallPaper4.5","WallPaper5.5","WallPaper5.5_tone","WallPaper6","WallPaper6.5","WallPaper7.5","WallPaper7.5_tone"],a=!1,l=["sm-new-employees-container","sm-current-employees-container","sm-exiting-employees-container","sm-cadillac-tax-container","sm-penalties-container","sm-benefits-requirements-container","sm-voluntary-insurance-container","sm-exchanges-container","sm-learn-more-container","new-employees-container","current-employees-container","exiting-employees-container","cadillac-tax-container","penalties-container","benefits-requirements-container","voluntary-insurance-container","exchanges-container","learn-more-container"];new Waypoint({element:document.getElementById("waypointHeader"),handler:function(t){}}),window.waypoints=[],l.forEach(function(t,e){console.log("."+t),window.waypoints[e]=new Waypoint({element:document.querySelector("."+t),handler:function(t){console.log("loading..."),c(Math.floor(12*Math.random()))}})}),a!==!0&&(s.forEach(function(t){(new Image).src=i+t+r}),a=!0);var c=function(t){setTimeout(function(){o.backgroundImage="url("+i+s[t]+r+")",console.log("loading "+i+s[t]+r)},100)},u=jQuery(".business-type-select");u.each(function(t,e){console.log(e),$(e).on("click",function(){console.log(e),jQuery(".hcr-menu-item").hide(),"business-50"===e.dataset.business?$("a.sm").parent().show():$("a.lg").parent().show(),document.body.classList="",document.body.classList.add(e.dataset.business+"-active");var t=document.querySelector(".business-type-select.active");t&&t.classList.remove("active"),e.classList.add("active");for(var n=document.querySelectorAll(".hcr-menu"),o=0;o<n.length;o++)n[o].style.visibility="visible";h.accordion(0,"top",function(t,e){e.el.classList.add("open"),console.log(t,e)});var i=document.querySelector(".business-container.visible");i&&(i.style.display="none",i.classList.remove("visible"));var r=document.querySelector("."+e.dataset.business+"-container");console.log(r),$(r).fadeIn(),r.classList.add("visible"),jQuery("html, body").animate({scrollTop:jQuery(r).offset().top},1e3,function(){$(r).find("h3").addClass("animated").addClass("pulse")}),c(Math.floor(12*Math.random())+0),window.waypoints=[],l.forEach(function(t,e){console.log("."+t),window.waypoints[e]=new Waypoint({element:document.querySelector("."+t),handler:function(t){console.log("loading..."),c(Math.floor(12*Math.random()))}})})})});var h=new OriDomi(document.querySelector(".hcr-menu"),{hPanels:3,ripple:2,shading:"hard",touchEnabled:!1});h.foldUp("top");var p=jQuery(".hcr-menu-item a");p.on("click",function(t,e){t.preventDefault(),console.log("."+t.target.href.split("#")[1]),jQuery("html, body").animate({scrollTop:jQuery("."+t.target.href.split("#")[1]+"-container").offset().top-100},1e3,function(){})});for(var d=[],f=0;f<p.length;f++){var y=p[f],m=jQuery(y).attr("href");d.push(m)}jQuery(window).scroll(function(){for(var t=jQuery(window).scrollTop(),e=jQuery(window).height(),n=jQuery(document).height(),o=0;o<d.length;o++){var i=d[o].replace("#",""),r=jQuery("."+i+"-container").offset().top-200,s=jQuery("."+i+"-container").height();t>=r&&r+s>t?jQuery("a[href='#"+i+"']").addClass("active"):jQuery("a[href='#"+i+"']").removeClass("active")}if(t+e==n&&!jQuery("nav li:last-child a").hasClass("active")){var a=jQuery(".nav-active").attr("href");jQuery("a[href='"+a+"']").removeClass("active"),jQuery("nav li:last-child a").addClass("active")}})},{"../node_modules/waypoints/lib/noframework.waypoints":2}],2:[function(t,e,n){!function(){function t(o){if(!o)throw new Error("No options passed to Waypoint constructor");if(!o.element)throw new Error("No element option passed to Waypoint constructor");if(!o.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,o),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=o.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,e+=1}var e=0,n={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var o in n)e.push(n[o]);for(var i=0,r=e.length;r>i;i++)e[i][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.invokeAll("enable")},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=i.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,o[t.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,o={},i=window.Waypoint,r=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(".waypoints"),delete o[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,i.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){e.didScroll&&!i.isTouch||(e.didScroll=!0,i.requestAnimationFrame(t))})},e.prototype.handleResize=function(){i.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in e){var o=e[n],i=o.newScroll>o.oldScroll,r=i?o.forward:o.backward;for(var s in this.waypoints[n]){var a=this.waypoints[n][s],l=o.oldScroll<a.triggerPoint,c=o.newScroll>=a.triggerPoint,u=l&&c,h=!l&&!c;(u||h)&&(a.queueTrigger(r),t[a.group.id]=a.group)}}for(var p in t)t[p].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?i.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?i.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var n in this.waypoints[e])t.push(this.waypoints[e][n]);for(var o=0,i=t.length;i>o;o++)t[o].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,n=e?void 0:this.adapter.offset(),o={};this.handleScroll(),t={horizontal:{contextOffset:e?0:n.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:n.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var r in t){var s=t[r];for(var a in this.waypoints[r]){var l,c,u,h,p,d=this.waypoints[r][a],f=d.options.offset,y=d.triggerPoint,m=0,w=null==y;d.element!==d.element.window&&(m=d.adapter.offset()[s.offsetProp]),"function"==typeof f?f=f.apply(d):"string"==typeof f&&(f=parseFloat(f),d.options.offset.indexOf("%")>-1&&(f=Math.ceil(s.contextDimension*f/100))),l=s.contextScroll-s.contextOffset,d.triggerPoint=m+l-f,c=y<s.oldScroll,u=d.triggerPoint>=s.oldScroll,h=c&&u,p=!c&&!u,!w&&h?(d.queueTrigger(s.backward),o[d.group.id]=d.group):!w&&p?(d.queueTrigger(s.forward),o[d.group.id]=d.group):w&&s.oldScroll>=d.triggerPoint&&(d.queueTrigger(s.forward),o[d.group.id]=d.group)}}return i.requestAnimationFrame(function(){for(var t in o)o[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in o)o[t].refresh()},e.findByElement=function(t){return o[t.waypointContextKey]},window.onload=function(){r&&r(),e.refreshAll()},i.requestAnimationFrame=function(e){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t;n.call(window,e)},i.Context=e}(),function(){function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function n(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),o[this.axis][this.name]=this}var o={vertical:{},horizontal:{}},i=window.Waypoint;n.prototype.add=function(t){this.waypoints.push(t)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var o=this.triggerQueues[n],i="up"===n||"left"===n;o.sort(i?e:t);for(var r=0,s=o.length;s>r;r+=1){var a=o[r];(a.options.continuous||r===o.length-1)&&a.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(e){this.waypoints.sort(t);var n=i.Adapter.inArray(e,this.waypoints),o=n===this.waypoints.length-1;return o?null:this.waypoints[n+1]},n.prototype.previous=function(e){this.waypoints.sort(t);var n=i.Adapter.inArray(e,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},n.prototype.remove=function(t){var e=i.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(t){return o[t.axis][t.name]||new n(t)},i.Group=n}(),function(){function t(t){return t===t.window}function e(e){return t(e)?e:e.defaultView}function n(t){this.element=t,this.handlers={}}var o=window.Waypoint;n.prototype.innerHeight=function(){var e=t(this.element);return e?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var e=t(this.element);return e?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(t,e){function n(t,e,n){for(var o=0,i=e.length-1;i>o;o++){var r=e[o];n&&n!==r||t.removeEventListener(r)}}var o=t.split("."),i=o[0],r=o[1],s=this.element;if(r&&this.handlers[r]&&i)n(s,this.handlers[r][i],e),this.handlers[r][i]=[];else if(i)for(var a in this.handlers)n(s,this.handlers[a][i]||[],e),this.handlers[a][i]=[];else if(r&&this.handlers[r]){for(var l in this.handlers[r])n(s,this.handlers[r][l],e);this.handlers[r]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var t=this.element.ownerDocument.documentElement,n=e(this.element.ownerDocument),o={top:0,left:0};return this.element.getBoundingClientRect&&(o=this.element.getBoundingClientRect()),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}},n.prototype.on=function(t,e){var n=t.split("."),o=n[0],i=n[1]||"__default",r=this.handlers[i]=this.handlers[i]||{},s=r[o]=r[o]||[];s.push(e),this.element.addEventListener(o,e)},n.prototype.outerHeight=function(e){var n,o=this.innerHeight();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),o+=parseInt(n.marginTop,10),o+=parseInt(n.marginBottom,10)),o},n.prototype.outerWidth=function(e){var n,o=this.innerWidth();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),o+=parseInt(n.marginLeft,10),o+=parseInt(n.marginRight,10)),o},n.prototype.scrollLeft=function(){var t=e(this.element);return t?t.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var t=e(this.element);return t?t.pageYOffset:this.element.scrollTop},n.extend=function(){function t(t,e){if("object"===("undefined"==typeof t?"undefined":_typeof(t))&&"object"===("undefined"==typeof e?"undefined":_typeof(e)))for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}for(var e=Array.prototype.slice.call(arguments),n=1,o=e.length;o>n;n++)t(e[0],e[n]);return e[0]},n.inArray=function(t,e,n){return null==e?-1:e.indexOf(t,n)},n.isEmptyObject=function(t){for(var e in t)return!1;return!0},o.adapters.push({name:"noframework",Adapter:n}),o.Adapter=n}()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
